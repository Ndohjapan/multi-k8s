# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: static-site

jobs:
  build_test:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # # Configure Workload Identity Federation and generate an access token.
    # - id: 'auth'
    #   name: 'Authenticate to Google Cloud'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     token_format: 'access_token'
    #     workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #     service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # Build out the client react image 

    - name: build client image
      run: docker build -t ndohjapan/react-test -f ./client/dockerfile.dev ./client


    # Run the test script for the react and add --coverage to ensure that the test exits

    - name: test app
      run: docker run --rm --detach ndohjapan/react-test npm test

    
    # # Get the GKE credentials so we can deploy to the cluster
    # - name: Set up GKE credentials
    #   uses: google-github-actions/get-gke-credentials@v0
    #   with:
    #     cluster_name: ${{ env.GKE_CLUSTER }}
    #     location: ${{ env.GKE_ZONE }}

  push_to_Docker_Hub:

    # The type of runner that the job will run on 

    runs-on: ubuntu-latest

    # build docker image and push to docker-hub
    # only if the app build and test successfully
    needs: [build_test]

    steps:

      - uses: actions/checkout@v3

      # Login to docker

      - name: login to docker
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # - name: build client
      #   run: docker build -t ndohjapan/multi-client ./client

      # - name: build nginx
      #   run: docker build -t ndohjapan/multi-nginx ./nginx

      # - name: build server
      #   run: docker build -t ndohjapan/multi-server ./server

      # - name: build worker
      #   run: docker build -t ndohjapan/multi-worker ./worker

      # - name: push client to docker hub
      #   run: docker push ndohjapan/multi-client

      # - name: push nginx to docker hub
      #   run: docker push ndohjapan/multi-nginx

      # - name: push server to docker hub
      #   run: docker push ndohjapan/multi-server

      # - name: push worker to docker hub
      #   run: docker push ndohjapan/multi-worker

  # deploy_to_GKE:
  #   name: Setup, Build, Publish, and Deploy
  #   runs-on: ubuntu-latest
  #   environment: production

  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   # Configure Workload Identity Federation and generate an access token.
  #   - id: 'auth'
  #     name: 'Authenticate to Google Cloud'
  #     uses: 'google-github-actions/auth@v0'
  #     with:
  #       token_format: 'access_token'
  #       workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
  #       service_account: 'my-service-account@my-project.iam.gserviceaccount.com'
  
       # Get the GKE credentials so we can deploy to the cluster
      # - name: Set up GKE credentials
      #   uses: google-github-actions/get-gke-credentials@v0
      #   with:
      #     cluster_name: ${{ env.GKE_CLUSTER }}
      #     location: ${{ env.GKE_ZONE }}

  #   # Set up kustomize
  #   - name: Set up Kustomize
  #     run: |-
  #       curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
  #       chmod u+x ./kustomize
  #   # Deploy the Docker image to the GKE cluster
  #   - name: Deploy
  #     run: |-
  #       # replacing the image name in the k8s template
  #       ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
  #       ./kustomize build . | kubectl apply -f -
  #       kubectl rollout status deployment/$DEPLOYMENT_NAME
  #       kubectl get services -o wide
